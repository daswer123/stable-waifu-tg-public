import { escapeMarkdown, generateRandomSeed, generateUniqueId, getModelPage, withErrorHandling } from "../utils/funcs.js";
import { Markup } from "telegraf";
import path from "path";
import fs from "fs"
import { createInstance, getInstanceById, getOperationStatus, getUnicIdByJobId, handleInstanceRequest, updateInstance, updateInstanceSid } from "../backend/db/db_prompts.js";
import { createARMenu, createCreateMessageMarkup, createCreateMessageMarkupVar, createGiftTokenMenuAndEdit, createMagickMenu, createModelMenu, createNegativeMenu, createPresetSelectMenu, createSmartRecycleMenu, createStrengthMenu, createTextMenu, createTextMenuAndEdit, createTextMenuAndReply } from "./functions.js";
import { createModel, getARByRatio, getAllNegativeEmbeddings, getDefaultPresetBymodel_name, getModelByName, getPresetByName, getSelectedPresetBymodel_name, getStrenghtById, getStrenghtByName, setAlterMode, setPresetAsSelected } from "../backend/db/db_settings.js";
import { cancelGen, checkJobStatus, complexUpscaleRequest, generateRequest, generateRequestImg, simpleUpscaleRequest, startGenerationPolling } from "./api.js";
import { updateUserPreferences } from "../backend/db/db_users.js";

export const registerBotActions = withErrorHandling(async (bot) => {
   
   // Commands acitons
   bot.action("change_anonim_gift_token",async(ctx)=>{
      ctx.session.isAnonim = !ctx.session.isAnonim

      const buttons = [
         [Markup.button.callback(`üëª –ê–Ω–æ–Ω–∏–º–Ω–æ: ${ctx.session.isAnonim ? "–î–∞" : "–ù–µ—Ç"}`, 'change_anonim_gift_token')],
         [Markup.button.callback('üìù –ü–æ–¥–ø–∏—Å—å –∫ –ø–æ–¥–∞—Ä–∫—É', 'change_notes_gift_token')]
      ]
      await ctx.editMessageReplyMarkup({ inline_keyboard: buttons });
   })

   bot.action("change_notes_gift_token",async(ctx)=>{
      let baseMessage = `üìù *–ü–æ–¥–ø–∏—Å—å* –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ç–≤–æ–µ–º—É –ø–æ–¥–∞—Ä–∫—É –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—å\\!
–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Ç–µ–∫—Å—Ç, —Å–ª–µ–¥—É—è —É—Å–ª–æ–≤–∏—è–º –Ω–∏–∂–µ\\.\n\n`

      baseMessage+=`*1*\\. –ü–æ–¥–ø–∏—Å—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ *150* —Å–∏–º–≤–æ–ª–æ–≤\\.
*2*\\. –í –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Å—ã–ª–æ–∫, —Å–ø–∞–º–∞, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–π\\.\n\n`

      const noteString = ctx.session.userNoteSendGift ? `*–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n\`` + ctx.session.userNoteSendGift + `\`` : `_–°–µ–π—á–∞—Å –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–ø–∏—Å—å_`
      baseMessage+=noteString

      const buttons = [
         ctx.session.userNoteSendGift ? [Markup.button.callback('‚ùå –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏', 'send_gift_back_clear')] : [],
         [Markup.button.callback('<< –ù–∞–∑–∞–¥', 'send_gift_back')],
      ]

      ctx.editMessageText(baseMessage, {
         parse_mode: "MarkdownV2",
         reply_markup: Markup.inlineKeyboard(buttons).reply_markup
      })


      ctx.session.currectAction = "sendToken"
   })

   bot.action("send_gift_back_clear",async(ctx)=>{
      ctx.session.userNoteSendGift = ""
      createGiftTokenMenuAndEdit(ctx)
   })

   bot.action("send_gift_back",async(ctx)=>{
      createGiftTokenMenuAndEdit(ctx)
   })

   // SEED
   bot.action(/set_sid_(.*)/,async(ctx)=>{

     const unic_id = ctx.match[1]
     const message = `üå± –°–∏–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ–±–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∞—Ä—Ç —É —Å–µ–±—è\\. –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–∏–≥—Ä–∞—Ç—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥—Ä—É–≥–∞ –∏–ª–∏ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∫–∏ —Å–≤–æ–µ–≥–æ\\.
*__–í–Ω–∏–º–∞–Ω–∏–µ__*\\! –ï—Å–ª–∏ —Ç—ã –±–µ—Ä—ë—à—å —á—É–∂–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É —Ç–µ–±—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–∞–∫–∏–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–≤–æ–¥, –∫–∞–∫ —É –µ–≥–æ –∞–≤—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –∞—Ä—Ç –≤—ã—à–µ–ª –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º\\.
–¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –∞–≤—Ç–æ—Ä–∞ üå± *QuickSeed* —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –±–æ—Ç —Å–∞–º –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª\\!

\\> –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∏–¥\\. –≠—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\\.`

      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      const buttons = Markup.inlineKeyboard([
         menuData.sid ? [Markup.button.callback("üé≤ –°–ª—É—á–∞–π–Ω—ã–π", `set_random_sid_${unic_id}`)] : [],
         [Markup.button.callback("<< –ù–∞–∑–∞–¥",`back_${unic_id}`)]
         ])

      const replyMessage = await ctx.editMessageText(message,{
         reply_markup: buttons.reply_markup,
         parse_mode: "MarkdownV2"
      })

      ctx.session.menuId = unic_id
      ctx.session.messageToClear = replyMessage.message_id
      ctx.session.currectAction = "editSid"

   })

   bot.action(/set_random_sid_(.*)/,async(ctx)=>{

      const unic_id = ctx.match[1]
      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      await updateInstance(unic_id,"sid",0)
      await updateInstance(unic_id, "variation_sid",0)
      createTextMenuAndEdit(ctx, unic_id)
   })

   // AR
   bot.action(/go_ar_menu_(.*)/,async(ctx)=>{
      // Create sleep function
      const unic_id = ctx.match[1]
      createARMenu(ctx, unic_id)
   })

   bot.action(/set_ar_(.*)_(.*)/,async(ctx)=>{
      let ar = ctx.match[1]
      const unic_id = ctx.match[2]

      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      if(ar == "1:1" && menuData.aspect_ratio == "1:1"){
         const alertMessage = `üñº –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:1.–≠—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–∞–∫ —á—Ç–æ –µ–≥–æ –Ω–µ–ª—å–∑—è –ø–æ–≤–µ—Ä–Ω—É—Ç—å`
         await ctx.telegram.answerCbQuery(ctx.callbackQuery.id, alertMessage, { show_alert: true });
         return
      }

      
      if(menuData.aspect_ratio == ar){
         const newType = menuData.type == "portrait" ? "landscape" : "portrait"
         // we need reverse ar, like 1:2 => 2:1, 16:9 => 9:16
         ar =  ar.split(":").reverse().join(":")

         await updateInstance(unic_id, "type", newType)
      } 

      await updateInstance(unic_id, "aspect_ratio", ar)
      createARMenu(ctx, unic_id)
   })

   bot.action(/swap_ar_(.*)/gm,async(ctx)=>{
      const unic_id = ctx.match[1]

      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      if(menuData.aspect_ratio == "1:1"){
         const alertMessage = `üñº –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:1.–≠—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–∞–∫ —á—Ç–æ –µ–≥–æ –Ω–µ–ª—å–∑—è –ø–æ–≤–µ—Ä–Ω—É—Ç—å`
         await ctx.telegram.answerCbQuery(ctx.callbackQuery.id, alertMessage, { show_alert: true });
         return
      }

      const newType = menuData.type == "portrait" ? "landscape" : "portrait"
      const newAR = menuData.aspect_ratio.split(":").reverse().join(":")

      await updateInstance(unic_id, "type", newType)
      await updateInstance(unic_id, "aspect_ratio", newAR)

      createTextMenuAndEdit(ctx,unic_id)
   })

   // Negative
   bot.action(/go_negative_menu_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      createNegativeMenu(ctx, unic_id)
   })

   bot.action(/set_negative_(expert|simple)_(.*)/,async(ctx)=>{
      const mode = ctx.match[1]
      const unic_id = ctx.match[2]

      // console.log(unic_id,mode)

      let baseMessage = ``

      const buttons = Markup.inlineKeyboard([
         [Markup.button.callback("<< –ù–∞–∑–∞–¥",`back_negative_${unic_id}`)]
      ])

      if(mode == "expert"){
         baseMessage = `üíÄ *–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º*
–í—Å—ë, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å —Å—é–¥–∞, –±—É–¥–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è—Ç—å –Ω–∞ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ *[–æ—Å–æ–±—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é](https://telegra.ph/Expert-NP--Stable-Waifu-10-09)* –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞\\!`
         
         let allNegativeEmebedings = await getAllNegativeEmbeddings()
         allNegativeEmebedings = allNegativeEmebedings.join("\`, \`")
         baseMessage += `\n\n\\*–î–æ—Å—Ç—É–ø–Ω—ã–µ TI: \`${allNegativeEmebedings}\`\\.`

      }

      if(mode == "simple"){
         baseMessage = `‚ú® *–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º*
–°—é–¥–∞ –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å —Ç–æ, —á–µ–≥–æ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, __–µ—Å–ª–∏__ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—ã—á–Ω–æ–º –≤–≤–æ–¥–µ –Ω–µ –ø–æ–º–æ–≥–∞—é—Ç\\.
         
‚ùî *–ö–∞–∫ –∑–∞–ø–æ–ª–Ω–∏—Ç—å?*
–¢–∞–∫ –∂–µ, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥: —Ç–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ—Å–∞, –∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–≥–∏\\. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–±—Ä–∞—Ç—å –∑–æ–Ω—Ç–∏–∫, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ \`umbrella\`\\.
–£—á—Ç–∏, —á—Ç–æ –±–æ–ª—å—à–æ–π –≤–≤–æ–¥ _–º–æ–∂–µ—Ç_ —Å–Ω–∏–∑–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ—Å–ª—É—à–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏\\!`
      }

      const message = await ctx.editMessageText(baseMessage,{
         reply_markup: buttons.reply_markup,
         disable_web_page_preview: true,
         parse_mode: "MarkdownV2"
      })

      await updateInstance(unic_id, "negative_mode", mode)

      // Prepare for Input
      ctx.session.messageToClear  = message.message_id
      ctx.session.currectAction = "editNegative"
      ctx.session.menuId = unic_id

      // createNegativeMenu(ctx, unic_id)
   })

   bot.action(/reset_negative_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]

      await updateInstance(unic_id, "negative_mode", "simple")
      await updateInstance(unic_id, "negative_prompt", "")

      createTextMenuAndEdit(ctx, unic_id)
   })

   bot.action(/back_negative_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      createNegativeMenu(ctx,unic_id)
   })

   // Magick

   bot.action(/go_magick_menu_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      createMagickMenu(ctx,unic_id)
   })

   // set_magick_shape_
   // set_magick_poses_
   // set_magick_ref_

   // Shape magick
   bot.action(/set_magick_shape_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]

      const menuId = await getInstanceById(unic_id)

      const ar_sizes = await getARByRatio(menuId.aspect_ratio)
      console.log(ar_sizes)
      console.log(`https://fakeimg.pl/${ar_sizes.resolution}/ffffff/ffffff?text=+`)
      
      let baseMessage = `‚ö°Ô∏è –û—Ç–∫—Ä–æ–π —ç—Ç–æ—Ç *–±–µ–ª—ã–π —Ö–æ–ª—Å—Ç* –∏ –Ω–∞—Ä–∏—Å—É–π –Ω–∞ –Ω—ë–º —É–∑–æ—Ä –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≤ Telegram\\. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞\\.`
      baseMessage+=`[¬†](https://fakeimg.pl/${ar_sizes.resolution}/ffffff/ffffff?text=+)\n`
      baseMessage+="\n\n‚ùï [–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è](https://telegra.ph/Stable-Waifu--Figura-08-01)"

      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      const hasMagickShape = menuData.magick_shape ? true : false

      const cancelButton = hasMagickShape ? [Markup.button.callback(`‚ùå –£–±—Ä–∞—Ç—å —Ñ–∏–≥—É—Ä—É`,`remove_magick_shape_${unic_id}`)] : []

      const buttons = Markup.inlineKeyboard([
         cancelButton,
         [Markup.button.callback("<< –ù–∞–∑–∞–¥", `go_magick_menu_${unic_id}`)]
      ])

      const messageClear = await ctx.editMessageText(baseMessage,{
         reply_markup: buttons.reply_markup,
         parse_mode: "MarkdownV2"
      })

      ctx.session.currectAction = "uploadMagickShape"
      ctx.session.menuId = unic_id
      ctx.session.messageToClear = messageClear.message_id
   })

   bot.action(/remove_magick_shape_(.*)/,async(ctx)=>{
      await updateInstance(ctx.match[1], "magick_shape", "")
      createTextMenuAndEdit(ctx, ctx.match[1])
   })

   // Pose
   bot.action(/set_magick_pose_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      
      let baseMessage = `‚ö°Ô∏è –¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –Ω—É–∂–Ω—É—é –ø–æ–∑—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ _\\(–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\\)_ –Ω–∞ –∞—Ä—Ç–µ\\.\n\n`
      baseMessage+=`*__–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?__*
*1*\\. –ü–æ–¥–±–µ—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å –Ω—É–∂–Ω–∞—è —Ç–µ–±–µ –ø–æ–∑–∞ —Å —á—ë—Ç–∫–∏–º –≤–∏–¥–æ–º –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –Ω—É–∂–Ω—ã–µ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏\\. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ, –¥—Ä—É–≥–æ–π –∞—Ä—Ç –∏–ª–∏ —Å–∫–µ–ª–µ—Ç\\.
*2*\\. –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\\.`
      baseMessage+="\n\n_\\*–ï—Å–ª–∏ –∫–∞–∫–∏–µ\\-—Ç–æ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ —Å–∫—Ä—ã—Ç—ã –∏–∑ –∫–∞–¥—Ä–∞, –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ò–ò\\._\n–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω—É–∂–Ω—É—é –ø–æ–∑—É —Å –Ω—É–ª—è –Ω–∞ *[—ç—Ç–æ–º —Å–∞–π—Ç–µ](https://webapp.magicposer.com/)*\\!"

      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      const hasMagickRef = menuData.magick_ref ? true : false
      const hasMagickPose = menuData.magick_pose ? true : false

      const setFromPose = !!hasMagickRef && !hasMagickPose ? [Markup.button.callback(`üîÄ –í–∑—è—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å`,`magick_ref_to_pose_${unic_id}`)] : []
      const cancelButton = hasMagickPose ? [Markup.button.callback(`‚ùå –£–±—Ä–∞—Ç—å –ø–æ–∑—É`,`remove_magick_pose_${unic_id}`)] : []
      
      const buttons = Markup.inlineKeyboard([
         cancelButton,
         setFromPose,
         [Markup.button.callback("<< –ù–∞–∑–∞–¥", `go_magick_menu_${unic_id}`)]
      ])

      const messageClear = await ctx.editMessageText(baseMessage,{
         reply_markup: buttons.reply_markup,
         parse_mode: "MarkdownV2"
      })

      ctx.session.currectAction = "uploadMagickPose"
      ctx.session.menuId = unic_id
      ctx.session.messageToClear = messageClear.message_id
   })

   bot.action(/magick_ref_to_pose_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      await updateInstance(unic_id, "magick_pose", menuData.magick_ref)
      createTextMenuAndEdit(ctx, unic_id)
   })

   bot.action(/remove_magick_pose_(.*)/,async(ctx)=>{
      await updateInstance(ctx.match[1], "magick_pose", "")
      createTextMenuAndEdit(ctx, ctx.match[1])
   })

   // Reference
   bot.action(/set_magick_ref_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      
      let baseMessage = `‚ö°Ô∏è –¢—ã –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞\\.\n\n`
      baseMessage+=`*__–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?__*
–ú–æ–¥–µ–ª—å –≤–æ–∑—å–º—ë—Ç –∏–∑ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —á–∞—Å—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –Ω–∞–ø—Ä–∞–≤–ª—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –±—Ä–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞\\.
[–ø—Ä–∏–º–µ—Ä –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ](https://telegra.ph/Reference-Examples--Stable-Waifu-10-08)`
      baseMessage+="\n\n\\> –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\\-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å\\!"

      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      const hasMagickShape = menuData.magick_pose ? true : false
      const hasMagickRef = menuData.magick_ref ? true : false

      const setFromPose = !!hasMagickShape && !hasMagickRef ? [Markup.button.callback(`üîÄ –í–∑—è—Ç—å –ø–æ–∑—É`,`magick_pose_to_ref_${unic_id}`)] : []
      const cancelButton =  hasMagickRef ? [Markup.button.callback(`‚ùå –£–±—Ä–∞—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å`,`remove_magick_ref_${unic_id}`)] : []

      const buttons = Markup.inlineKeyboard([
         cancelButton,
         setFromPose,
         [Markup.button.callback("<< –ù–∞–∑–∞–¥", `go_magick_menu_${unic_id}`)]
      ])

      const messageClear = await ctx.editMessageText(baseMessage,{
         reply_markup: buttons.reply_markup,
         parse_mode: "MarkdownV2",
         disable_web_page_preview: true,
      })

      ctx.session.currectAction = "uploadMagickRef"
      ctx.session.menuId = unic_id
      ctx.session.messageToClear = messageClear.message_id
   })

   bot.action(/magick_pose_to_ref_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      await updateInstance(unic_id, "magick_ref", menuData.magick_pose)
      createTextMenuAndEdit(ctx, unic_id)
   })

   bot.action(/remove_magick_ref_(.*)/,async(ctx)=>{
      await updateInstance(ctx.match[1], "magick_ref", "")
      createTextMenuAndEdit(ctx, ctx.match[1])
   })

   bot.action(/remove_all_magick_(.*)/,async(ctx)=>{
      await updateInstance(ctx.match[1], "magick_ref", "")
      await updateInstance(ctx.match[1], "magick_pose", "")
      await updateInstance(ctx.match[1], "magick_shape", "")

      createTextMenuAndEdit(ctx, ctx.match[1])
   })

   // Model Choose

   bot.action(/go_model_menu_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      const model_page = await getModelPage(menuData.model_name)

      // console.log(model_page,"model_ppppaaaaaaaaageeee")

      await updateInstance(unic_id, "model_page", model_page)
      createModelMenu(ctx,unic_id)
   })

   bot.action(/model_next_page_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const menuData = await handleInstanceRequest(unic_id,ctx)
      
      if(menuData == null) return

      await updateInstance(unic_id, "model_page", menuData.model_page+1)
      createModelMenu(ctx,unic_id)
   })

   bot.action(/model_prev_page_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const menuData = await handleInstanceRequest(unic_id,ctx)
      
      if(menuData == null) return

      await updateInstance(unic_id, "model_page", menuData.model_page-1)
      createModelMenu(ctx,unic_id)
   })

   bot.action(/select_model_(.*)_(.*)/,async(ctx)=>{
      const model_name = ctx.match[1]
      const unic_id = ctx.match[2]

      const model = await getModelByName(model_name)
      const menuData = await handleInstanceRequest(unic_id,ctx)
      
      if(menuData == null) return

      console.log(menuData.model_name == model_name, model.has_alter_mode,model,menuData, "–¢–ï–°–¢" )
      if(menuData.model_name == model_name && model.has_alter_mode) {

         await updateInstance(unic_id, "enable_alter_model", !menuData.enable_alter_model)
         await updateInstance(unic_id, "sd_model", model.alter_model_stable_model)
         await createModelMenu(ctx, unic_id)
         return

      } else if(menuData.model_name == model_name){
         ctx.answerCbQuery("")
         return
      }

      let preset_name

      if(model.has_preset){
         preset_name = await getSelectedPresetBymodel_name(model_name)
         if(!preset_name){
            preset_name = await getDefaultPresetBymodel_name(model_name)
         }

         await updateInstance(unic_id, "preset_name", preset_name.preset_name)
      } else{
         await updateInstance(unic_id, "preset_name", "")
      }

      await updateInstance(unic_id, "model_name", model_name)
      await updateInstance(unic_id, "sd_model", model.stable_model)

      // console.log(model_name,preset_name)
      createModelMenu(ctx,unic_id)
   })

   // Presets
   bot.action(/model_select_presets_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      createPresetSelectMenu(ctx,unic_id)
   })

   bot.action(/select_preset_(.*)_(.*)/,async(ctx)=>{
      const preset_name = ctx.match[1]
      const unic_id = ctx.match[2]

      const modelData = await handleInstanceRequest(unic_id,ctx)
      if(modelData == null) return

      if(modelData.preset_name == preset_name) {
         ctx.answerCbQuery("")
         return
      }

      setPresetAsSelected(preset_name)
      await updateInstance(unic_id, "preset_name", preset_name)

      // console.log(model_name,preset_name)
      createPresetSelectMenu(ctx,unic_id)
   })


   // Img2Img Menu

   // Recycle menu
   bot.action(/go_recycle_menu_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]

      createSmartRecycleMenu(ctx,unic_id)
   })

   bot.action(/switch_recycle_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const menuData = await handleInstanceRequest(unic_id,ctx)
      if(menuData == null) return

      const recycle = menuData.img_2_smart_recycle ? false : true
      await updateInstance(unic_id, "img_2_smart_recycle", recycle)
      createTextMenuAndEdit(ctx, unic_id)
   })

   // Strenght
   bot.action(/go_strenght_menu_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      createStrengthMenu(ctx,unic_id)
   })

   bot.action(/change_strenght_(.*)_(.*)/,async(ctx)=>{
      const id = ctx.match[1]
      const unic_id = ctx.match[2]

      const strenght = await getStrenghtById(id)
      const menuData = await handleInstanceRequest(unic_id, ctx)


      if(strenght.name == menuData.img_2_img_strength) {
         ctx.answerCbQuery("")
         return
      }

      await updateInstance(unic_id, "img_2_img_strength", strenght.name)
      createStrengthMenu(ctx,unic_id)
   })


   // Generate

   bot.action(/generate_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const menuData = await getInstanceById(unic_id)

      console.log(menuData.sid, menuData.sid == 0)
      if(menuData.sid == 0){
         const new_sid = await generateRandomSeed()
         await updateInstanceSid(unic_id, new_sid)
      }
      
      let job;
      try{
         job = menuData.generation_type == "txt2img" ? await generateRequest(ctx, unic_id) : await generateRequestImg(ctx, unic_id)
         startGenerationPolling(job.job_id,ctx)
      } catch(e){
         console.log(e)
         ctx.reply("–û—à–∏–±–∫–∞!")
         return
      }

      const userPrefData = {
         default_model : menuData.model_name,
         default_ar : menuData.aspect_ratio,
         default_type : menuData.type,
      }

      await updateUserPreferences(ctx.from.id, userPrefData)

      console.log(job.job_id)

      const generation = await checkJobStatus(job.job_id)
      let isStarted = false

      if(generation.status == "started"){
         isStarted = true
      }

      const button = !isStarted ? [Markup.button.callback(`–û—Ç–º–µ–Ω–∏—Ç—å`,`cancel_gen_${job.job_id}`)] : []
      let baseMessage = !isStarted ? `*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è\\!*` : "*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å\\!*"

      ctx.editMessageText(`üèÅ ${baseMessage}\n_–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 20 —Å–µ–∫—É–Ω–¥_`,{
         reply_markup: Markup.inlineKeyboard([button]).reply_markup,
         parse_mode: "MarkdownV2",
      })
      ctx.answerCbQuery("")
   })

   bot.action(/gen_again_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]

      const menuData = await getInstanceById(unic_id)
      const [new_unic_id,new_edit_id] = await generateUniqueId()

      menuData.unic_id = new_unic_id
      menuData.edit_id = new_edit_id
      menuData.sid = await generateRandomSeed()

      await createInstance(menuData)
      
      let job;
      try{
         job = menuData.generation_type == "txt2img" ? await generateRequest(ctx, new_unic_id) : await generateRequestImg(ctx, new_unic_id)
         startGenerationPolling(job.job_id,ctx,false,ctx.callbackQuery.message,"genAgain")
      } catch(e){
         console.log(e)
         ctx.reply("–û—à–∏–±–∫–∞!")
         return
      }

      console.log(job.job_id)

      const generation = await checkJobStatus(job.job_id)
      let isStarted = false

      if(generation.status == "started"){
         isStarted = true
      }

      const [baseMessage,buttons] = await createCreateMessageMarkup(unic_id,null,"again",job.job_id)
      
      await ctx.telegram.answerCbQuery(
         ctx.callbackQuery.id,"üîÅ –î–µ–ª–∞–µ–º –ü–æ–≤—Ç–æ—Ä!\n–≠—Ç–æ –∑–∞–π–º–µ—Ç 20 —Å–µ–∫—É–Ω–¥",{show_alert:true}
       );

      await ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons).reply_markup)
      // const [statusData, ctx, message] = await createCompleteMenu(statusData,ctx)
   })

   bot.action(/variations_gen_menu_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]

      let baseMessage = `üîÄ –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –∞—Ä—Ç, –Ω–æ —Ö–æ—á–µ—Ç—Å—è *–≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏?*
–ú—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–ª—è —Ç–µ–±—è –ø–æ—Ö–æ–∂—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –≤—Å–µ–≥–æ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫\\!`
      
      const button = [
         [Markup.button.callback("üîÄ –í–∞—Ä–∏–∞—Ü–∏—è ( 10—Ç )",`variations_gen_start_${unic_id}_true`)],
         [Markup.button.callback("–ù–∞–∑–∞–¥",`return_gen_${unic_id}`)]
      ]

      ctx.editMessageCaption(baseMessage, {
         reply_markup: Markup.inlineKeyboard(button).reply_markup,
         parse_mode: "MarkdownV2"
     });
   })

   bot.action(/return_var_(.*)/,async (ctx) => {
      const unic_id = ctx.match[1]

      const [fullMessage,buttons] = await createCreateMessageMarkupVar(unic_id)

      await ctx.editMessageCaption(fullMessage, {
         reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
         parse_mode: "MarkdownV2"
      })
   })

   bot.action(/upscale_gen_menu_(.*)_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const menuType = ctx.match[2]
    
      let baseMessage = `üî• [*HyperScale 2\\.1*](https://telegra.ph/HyperScale---Stable-Waifu-05-18) \‚Äì —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—à–∏—Ö –∞—Ä—Ç–æ–≤ –¥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ò–ò —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤\\!
[*–ø—Ä–∏–º–µ—Ä—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ*](https://telegra.ph/HyperScale---Stable-Waifu-05-18)`
    
      baseMessage+=`\n\n*1 –∞—Ä—Ç \‚Äì 20 —Ç–æ–∫–µ–Ω–æ–≤* \\([15 —Å Waifu\\+](https://t.me/StableWaifuBot?start=waifu_plus)\\)`
      baseMessage+=`\n\n_–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π [Upscale x2](https://telegra.ph/Primer-Upscale-x2-04-07) –∑–∞ 5 —Ç–æ–∫–µ–Ω–æ–≤ \\/ –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å [Waifu\\+](https://t.me/StableWaifuBot?start=waifu_plus)_`
      
      console.log(menuType)
      const returnCallback = menuType == "gen" ? `return_gen_${unic_id}` : `return_var_${unic_id}`
      const specifyMenuSimple = menuType == "gen" ? `upscale_simple_start_${unic_id}_gen` : `upscale_simple_start_${unic_id}_var`
      const specifyMenuComplex = menuType == "gen" ? `upscale_complex_start_${unic_id}_gen` : `upscale_complex_start_${unic_id}_var`

      const button = [
         [Markup.button.callback("üÜô Upscale 2x",specifyMenuSimple),Markup.button.callback("üî• HyperScale",specifyMenuComplex)],
         [Markup.button.callback("<< –ù–∞–∑–∞–¥",returnCallback)]
      ]
    
      ctx.editMessageCaption(baseMessage, {
         reply_markup: Markup.inlineKeyboard(button).reply_markup,
         parse_mode: "MarkdownV2"
     });
    })


    bot.action(/upscale_simple_start_(.*)_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const menuType = ctx.match[2]

      const menuData = await getInstanceById(unic_id)
      const new_unic_id = menuData.unic_id

      let job;
      try{
         job = await simpleUpscaleRequest(ctx, new_unic_id)
         startGenerationPolling(job.job_id,ctx,false,ctx.callbackQuery.message,`simple_upscale_${menuType}`)
      } catch(e){
         console.log(e)
         ctx.reply("–û—à–∏–±–∫–∞!")
         return
      }

      console.log(job.job_id)

      const generation = await checkJobStatus(job.job_id)
      let isStarted = false

      if(generation.status == "started"){
         isStarted = true
      }

      // const [baseMessage,buttons] = await createCreateMessageMarkup(unic_id,null,"again",job.job_id)
      
      await ctx.telegram.answerCbQuery(
         ctx.callbackQuery.id,"üÜô –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n–≠—Ç–æ –∑–∞–π–º–µ—Ç 20 —Å–µ–∫—É–Ω–¥",{show_alert:true}
       );

       if(menuType == "gen"){
         const [baseMessage,buttons] = await createCreateMessageMarkup(unic_id, null, "scale", job.job_id)
         await ctx.editMessageCaption(baseMessage, {
            reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
            parse_mode: "MarkdownV2"
         })

         return
       }

       const [baseMessage,buttons] = await createCreateMessageMarkupVar(unic_id,null,"scale",job.job_id)
       await ctx.editMessageCaption(baseMessage, {
         reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
         parse_mode: "MarkdownV2"
       })

      // await ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons).reply_markup)
    })

    bot.action(/upscale_complex_start_(.*)_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const menuType = ctx.match[2]

      const menuData = await getInstanceById(unic_id)
      const new_unic_id = menuData.unic_id

      let job;
      try{
         job = await complexUpscaleRequest(ctx, new_unic_id)
         startGenerationPolling(job.job_id,ctx,false,ctx.callbackQuery.message,`complex_upscale_${menuType}`)
      } catch(e){
         console.log(e)
         ctx.reply("–û—à–∏–±–∫–∞!")
         return
      }

      console.log(job.job_id)

      const generation = await checkJobStatus(job.job_id)
      let isStarted = false

      if(generation.status == "started"){
         isStarted = true
      }

      // const [baseMessage,buttons] = await createCreateMessageMarkup(unic_id,null,"again",job.job_id)
      
      await ctx.telegram.answerCbQuery(
         ctx.callbackQuery.id,"üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–æ –≤ upscale —á—Ç–æ –±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n~–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–∫–æ–ª–æ 1 –º–∏–Ω—É—Ç—ã",{show_alert:true}
       );

       if(menuType == "gen"){
         const [baseMessage,buttons] = await createCreateMessageMarkup(unic_id, null, "scale", job.job_id)
         await ctx.editMessageCaption(baseMessage, {
            reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
            parse_mode: "MarkdownV2"
         })

         return
       }

       const [baseMessage,buttons] = await createCreateMessageMarkupVar(unic_id,null,"scale",job.job_id)
       await ctx.editMessageCaption(baseMessage, {
         reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
         parse_mode: "MarkdownV2"
       })

      // await ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons).reply_markup)
    })



   bot.action(/variations_gen_start_(.*)_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      const editMessage = ctx.match[2]

      const menuData = await getInstanceById(unic_id)

      const oldUnicId = menuData.unic_id
      const [new_unic_id,new_edit_id] = await generateUniqueId()


      console.log(menuData.variation_sid,"BEFORE")
      menuData.unic_id = new_unic_id
      menuData.edit_id = new_edit_id
      menuData.subsid_id = unic_id
      menuData.variation_sid = await generateRandomSeed()
      console.log(menuData.variation_sid)
      await createInstance(menuData,"AFTER")

      const varString = editMessage == "varmenu" ? "varm" : "var"

      let job;
      try{
         job = menuData.generation_type == "txt2img" ? await generateRequest(ctx, new_unic_id) : await generateRequestImg(ctx, new_unic_id)
         startGenerationPolling(job.job_id,ctx,false,ctx.callbackQuery.message,varString)
      } catch(e){
         console.log(e)
         ctx.reply("–û—à–∏–±–∫–∞!")
         return
      }

      console.log(job.job_id)

      await ctx.telegram.answerCbQuery(
         ctx.callbackQuery.id,"üîÅ –î–µ–ª–∞–µ–º —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–∏–µ!\n–≠—Ç–æ –∑–∞–π–º–µ—Ç 20 —Å–µ–∫—É–Ω–¥",{show_alert:true}
       );

       if(editMessage == "varmenu"){
         const [finaleMessage,buttons] = await createCreateMessageMarkupVar(oldUnicId,null,"again",job.job_id)
      //    ctx.editMessageCaption({
      //      reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
      //      parse_mode: "MarkdownV2"
      //  })
      ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons).reply_markup)
       }
       
       if(editMessage == "true"){
         const [finaleMessage,buttons] = await createCreateMessageMarkup(unic_id,null,"var",job.job_id)
         ctx.editMessageCaption(finaleMessage,{
           reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
           parse_mode: "MarkdownV2"
       })
       } 
       

   })

   bot.action(/cancel_upscale_(.*)_(.*)/,async(ctx)=>{
      const job_id = ctx.match[1]
      const typeMenu = ctx.match[2]

      const unic_id = await getUnicIdByJobId(job_id)
      const canCancel = await checkJobStatus(job_id)

      if(canCancel.status == "started"){
         await ctx.telegram.answerCbQuery(
            ctx.callbackQuery.id,"‚Äº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏ –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ",{show_alert:true}
          );
          return
      }

      await ctx.telegram.answerCbQuery(
         ctx.callbackQuery.id,"‚ù§ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞, –º—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å!",{show_alert:true}
       );

      await cancelGen(job_id)
      
      let baseMessage,buttons;
      if(typeMenu == "gen"){
       [baseMessage,buttons] = await createCreateMessageMarkup(unic_id)
      }

      if(typeMenu == "var"){
         [baseMessage,buttons] = await createCreateMessageMarkupVar(unic_id) 
      }

      await ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons).reply_markup)

   })

   bot.action(/return_gen_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      
      const [finaleMessage,buttons] = await createCreateMessageMarkup(unic_id)

      ctx.editMessageCaption(finaleMessage,{
         reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
         parse_mode: "MarkdownV2"
      })
   })

   
   bot.action(/cancel_var_(.*)_(.*)/,async(ctx)=>{
      const job_id = ctx.match[1]
      const typeMenu = ctx.match[2]

      const unic_id = await getUnicIdByJobId(job_id)
      const canCancel = await checkJobStatus(job_id)

      if(canCancel.status == "started"){
         await ctx.telegram.answerCbQuery(
            ctx.callbackQuery.id,"‚Äº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏ –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ",{show_alert:true}
          );
          return
      }

      await ctx.telegram.answerCbQuery(
         ctx.callbackQuery.id,"‚ù§ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞, –º—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å!",{show_alert:true}
       );

      await cancelGen(job_id)
      
      let baseMessage,buttons;
      if(typeMenu == "main"){
       [baseMessage,buttons] = await createCreateMessageMarkup(unic_id)
      }

      if(typeMenu == "var"){
         [baseMessage,buttons] = await createCreateMessageMarkupVar(unic_id) 
      }

      await ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons).reply_markup)

   })

   bot.action(/return_gen_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      
      const [finaleMessage,buttons] = await createCreateMessageMarkup(unic_id)

      ctx.editMessageCaption(finaleMessage,{
         reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
         parse_mode: "MarkdownV2"
      })
   })

   bot.action(/cancel_again_gen_(.*)/,async(ctx)=>{
      const job_id = ctx.match[1]

      const unic_id = await getUnicIdByJobId(job_id)
      const canCancel = await checkJobStatus(job_id)

      if(canCancel.status == "started"){
         await ctx.telegram.answerCbQuery(
            ctx.callbackQuery.id,"‚Äº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏ –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ",{show_alert:true}
          );
          return
      }

      await ctx.telegram.answerCbQuery(
         ctx.callbackQuery.id,"‚ù§ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞, –º—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å!",{show_alert:true}
       );

      await cancelGen(job_id)

      const [baseMessage,buttons] = await createCreateMessageMarkup(unic_id)
      await ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons).reply_markup)
   })

   bot.action(/cancel_gen_(.*)/,async(ctx)=>{
      const job_id = ctx.match[1]

      const unic_id = await getUnicIdByJobId(job_id)
      const canCancel = await checkJobStatus(job_id)

      if(canCancel.status == "started"){
         await ctx.telegram.answerCbQuery(
            ctx.callbackQuery.id,"‚Äº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏ –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ",{show_alert:true}
          );
          return
      }

      await ctx.telegram.answerCbQuery(
         ctx.callbackQuery.id,"‚ù§ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞, –º—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å!",{show_alert:true}
       );

      await cancelGen(job_id)

       createTextMenuAndEdit(ctx, unic_id)
   })

   bot.action(/change_gen_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]

      const menuData = await getInstanceById(unic_id)
      const [new_unic_id,new_unic_edit] = generateUniqueId()

      menuData.unic_id = new_unic_id
      menuData.edit_id = new_unic_edit
      menuData.sid = 0

      console.log(ctx.message)

      const replyId = ctx.callbackQuery.message.message_id;

      await createInstance(menuData)
      await createTextMenuAndReply(ctx, unic_id,null,replyId)

      ctx.answerCbQuery("")
   })
   
   
   bot.action(/back_(.*)/,async(ctx)=>{
      const unic_id = ctx.match[1]
      createTextMenuAndEdit(ctx,unic_id)
   })

   bot.action("wait_message_gen",async(ctx)=>{
      ctx.telegram.answerCbQuery(
         ctx.callbackQuery.id,"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è",{show_alert:true}
         )

      ctx.answerCbQuery("")
   })
});
