import { bot } from "./bot.js";
import { Markup } from "telegraf";
import { getInstanceById, getInstanceCreatedTimeById, handleInstanceRequest, updateInstance } from "../backend/db/db_prompts.js";
import { escapeMarkdown, sortButtonsInRow, sortPresetButtonsInRow } from "../utils/funcs.js";
import { getARByRatio, getARByType, getAllModels, getAllModelsPreset, getAllStrenghtSettings, getDefaultPresetBymodel_name, getModelByName, getPresetByName, getStrenghtByName } from "../backend/db/db_settings.js";
import { modelsPerPage } from "../utils/variables.js";

const BASE_TEXT = `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è *–ø–æ –æ–ø–∏—Å–∞–Ω–∏—é* –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞\\!`;
const BASE_TEXT_IMG = `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è *–ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ* –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞\\!`;

export async function createTextMenu(ctx, unic_id, baseText = null) {
  const menuData = await handleInstanceRequest(unic_id,ctx)
  if(menuData == null) return

  // console.log(menuData)

  if(!baseText){
    baseText = menuData.generation_type == "txt2img" ? BASE_TEXT : BASE_TEXT_IMG
  }

  // Set Params
  ctx.session.menuId = null;
  ctx.session.messageToClear = null;
  ctx.session.currectAction = null;

  // console.log(ctx.session,"INIT")

  const hasMagick = (menuData.magick_ref || menuData.magick_pose || menuData.magick_shape)

  // IMG2IMG PARAMS
  const smartRecycleString = menuData.img_2_smart_recycle ?  `‚îî ‚ôªÔ∏è SmartRecycle` : ""

  // Get OtherParams
  const presetString = menuData.preset_name ? `${menuData.sid || hasMagick || smartRecycleString ? "‚îú" : "‚îî"} ‚ú® –ü—Ä–µ—Å–µ—Ç: *${menuData.preset_name}*\n` : ``;
  const sidString = menuData.sid ? `${(hasMagick || smartRecycleString) ? "‚îú" : "‚îî"} üå± –°–∏–¥: \`${menuData.sid}\`\n` : ``;
  const extraChars = menuData.extra_chars ? `–ü–µ—Ä—Å–æ–Ω–∞–∂\\(–∏\\): \`${menuData.extra_chars}\`\n` : ""
  const extraTags = menuData.extra_tags ? `–¢–µ–≥\\(–∏\\): \`${menuData.extra_tags}\`\n` : "";
  const extraWords = menuData.extra_word ? `–ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞: \`${menuData.extra_word}\`\n` : "";
  
// TXT2IMG MAGICK STRING
  const magickRefString = menuData.magick_ref ? "–†–µ—Ñ–µ—Ä–µ–Ω—Å" : null;
  const magickPoseString = menuData.magick_pose?  "–ü–æ–∑–∞" : null;
  const magickShapeString = menuData.magick_shape ? "–§–∏–≥—É—Ä–∞" : null;
  const magickList = [magickRefString,magickPoseString,magickShapeString].filter(Boolean);
  const magickString = hasMagick ? `‚îî ü™Ñ *${magickList.join(", ")}*` : ``;

  const hasVarSeed = menuData.variation_sid ? true : false 
  const varString = hasVarSeed ? `${magickString ? `‚îú` : `‚îî`}üîÄ –ü–æ —Å–∏–¥—É *–≤–∞—Ä–∏–∞—Ü–∏–∏*\n` : ``

  const isMagickWordsParams =  extraChars || extraTags || extraWords ? true : false
  const magickWordsParams = `\n\n*–ú–∞–≥–∏—á–µ—Å–∫–∏–µ c–ª–æ–≤–∞ –∏ —Ç–µ–≥–∏*\n${extraChars}${extraTags}${extraWords}`

  const otherSettingsString = `*–î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã*\n${presetString}${sidString}${varString}${magickString}${smartRecycleString}`;
  const isOtherParam = presetString || sidString || magickString || smartRecycleString ? true : false;
  // console.log(isOtherParam)

  const CUSTOM_SYMBOL = baseText == BASE_TEXT || baseText == BASE_TEXT_IMG  ? "üé® " : "";

  const additionalInfo = `\\> _[–°—Ç–∏–ª–∏ –∏ –Ω–∞–≤—ã–∫–∏](https://telegra.ph/Stili-i-vozmozhnosti-StableWaifuBot-06-05)_\n\\> _[–ê–Ω–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏](https://telegra.ph/Personazhi-iz-anime-i-igr-v-StableWaifuBot-04-13)_`;
  const prompt = `${CUSTOM_SYMBOL}\`${escapeMarkdown(menuData.prompt)}\`\n[–∏–∑–º–µ–Ω–∏—Ç—å](https://t.me/SD_Daswer_bot?start=${menuData.edit_id})`;

  // const otherParamsTest =  `\n\n–°–∏–¥:[–ü—Ä–æ–≤–µ—Ä–∫–∞](https://t.me/SD_Daswer_bot?start=${menuData.unic_id})\n\n`
  const otherParamsTest = ``;

  const otherParams = isOtherParam ? otherSettingsString : ``;
  const magickWordsParamsString = isMagickWordsParams ? magickWordsParams : ``

  const isPortarait = menuData.type == "portrait" ? "üì± –ü–æ—Ä—Ç—Ä–µ—Ç" : "üñº –õ–∞–Ω–¥—à–∞—Ñ—Ç";
  const arSymbol = menuData.type == "portrait" ? "^" : ">"

  // NEGATIVE
  const hasNegative = menuData.negative_prompt ? true : false;
  const extraNegativeString = menuData.negative_mode == "simple" ? "\\+ " : " "
  const negativeString = hasNegative ? `üôÖ${extraNegativeString}\`${menuData.negative_prompt}\`\n\n` : ``;
  

  const fullMessageText = `${baseText}\n\n${prompt}\n\n${negativeString}${additionalInfo}${otherParamsTest}${magickWordsParamsString}\n${otherParams}`;

//  Get exra symbol if model has alter mode
  const modelData = await getModelByName(menuData.model_name)
  const extraModelSymbol = modelData.has_alter_mode ? menuData.enable_alter_model ? modelData.alter_model_confirm_cymbol : modelData.confirm_cymbol : ""

  const buttonsTxt2Img = [
    [Markup.button.callback(`‚öôÔ∏è –ú–æ–¥–µ–ª—å: ${menuData.model_name} ${extraModelSymbol}`, `go_model_menu_${unic_id}`)],
    [Markup.button.callback(`üå± –°–∏–¥`, `set_sid_${unic_id}`), Markup.button.callback(isPortarait, `swap_ar_${unic_id}`)],
    [Markup.button.callback(`üôÖ –ù–µ–≥–∞—Ç–∏–≤`, `go_negative_menu_${unic_id}`), Markup.button.callback(`ü™Ñ –ú–∞–≥–∏—è`, `go_magick_menu_${unic_id}`)],
    [Markup.button.callback(`üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ - ${menuData.aspect_ratio} ${arSymbol}`, `go_ar_menu_${unic_id}`)],
    [Markup.button.callback(`üéâ –ù–∞—á–∞—Ç—å (10—Ç) `, `generate_${unic_id}`)],
  ];

  const smartRecycleCallback = menuData.img_2_smart_recycle ? `switch_recycle_${unic_id}` : `go_recycle_menu_${unic_id}`
  const smartRecycleBtnName = `${menuData.img_2_smart_recycle ? "‚ùå ":"‚ôªÔ∏è "} SmartRecycle ${menuData.img_2_smart_recycle ? " ‚ùå":""}`

  // IMGIMG settings
  const buttonsImg2Img = [
    [Markup.button.callback(`‚öôÔ∏è –ú–æ–¥–µ–ª—å: ${menuData.model_name} ${extraModelSymbol}`, `go_model_menu_${unic_id}`)],
    [Markup.button.callback(`üå± –°–∏–¥`, `set_sid_${unic_id}`), Markup.button.callback(`üôÖ –ù–µ–≥–∞—Ç–∏–≤`, `go_negative_menu_${unic_id}`)],
    [Markup.button.callback(smartRecycleBtnName, smartRecycleCallback)],
    !menuData.img_2_smart_recycle ? [Markup.button.callback(`üí™üèª –°–∏–ª–∞: ${menuData.img_2_img_strength}`, `go_strenght_menu_${unic_id}`)] : [],
    [Markup.button.callback(`üéâ –ù–∞—á–∞—Ç—å (5—Ç) `, `generate_${unic_id}`)],
  ];


  // Select message and settings for generationType
  const fullMessage = fullMessageText
  const buttons =  menuData.generation_type == "txt2img" ? buttonsTxt2Img : buttonsImg2Img

  return [fullMessage, buttons];

  // ctx.replyWithMarkdownV2(fullMessage,{
  //     disable_web_page_preview: true,
  //     reply_markup: Markup.inlineKeyboard(buttons).reply_markup
  // })
}

export async function createTextMenuAndReply(ctx, unic_id, baseText = null,replyMessage = null) {

  const result = await createTextMenu(ctx, unic_id, baseText);
  if(result == null) return

  const [fullMessage, buttons] = result

  await ctx.replyWithMarkdownV2(fullMessage, {
    disable_web_page_preview: true,
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
    reply_to_message_id: replyMessage
  });
}

export async function createTextMenuAndEdit(ctx, unic_id, baseText = null,replyMessage = null) {
  const result = await createTextMenu(ctx, unic_id, baseText);
  if(result == null) return

  const [fullMessage, buttons] = result

  await ctx.editMessageText(fullMessage, {
    disable_web_page_preview: true,
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
    parse_mode: "MarkdownV2",
    reply_to_message_id: replyMessage
  });
}

export async function createImgMenuAndEdit(ctx, unic_id, baseText = null, replyMessage = null, messageToEdit = null) {

  const result = await createTextMenu(ctx, unic_id, baseText);
  if(result == null) return

  const [fullMessage, buttons] = result

  // Check if messageToEdit was provided
  if (messageToEdit) {
    await ctx.telegram.editMessageText(messageToEdit.chat.id, messageToEdit.message_id, undefined, fullMessage, {
      disable_web_page_preview: true,
      reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
      parse_mode: "MarkdownV2",
    });
  } else {
    await ctx.editMessageText(fullMessage, {
      disable_web_page_preview: true,
      reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
      parse_mode: "MarkdownV2",
      reply_to_message_id: replyMessage,
    });
  }
}

export async function createARMenu(ctx, unic_id) {
  const menuData = await handleInstanceRequest(unic_id,ctx)
  if(menuData == null) return

  const ar = await getARByRatio(menuData.aspect_ratio);
  const img_link = ar.img_link

  const isPortarait = menuData.type == "portrait" ? true : false;
  const baseDesk = `üìê *–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω* –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\\. –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∞—Ä—Ç –Ω–∞ –æ–±–æ–∏ –∏–ª–∏ —Å —Ä–∞—Å—á—ë—Ç–æ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\\.\n_\\*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º *${isPortarait ? "2:3" : "3:2"}* –¥–ª—è –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –¥–≤–æ–π–Ω—ã–º –Ω–∞–∂–∞—Ç–∏–µ–º\\._\n[¬†](${img_link})`;
  
  const ARvarios = await getARByType(menuData.type);

  // Create button 3 row
  const buttons = [];

  for (let i = 0; i < ARvarios.length; i += 3) {
    let tempArray = [];

    // Add up to 3 items to temporary array
    for (let j = i; j < i + 3 && j < ARvarios.length; j++) {
      const aspect_ratio = ARvarios[j].ratio;

      let chosenBtn = ""
      if(aspect_ratio == menuData.aspect_ratio){
        chosenBtn = "‚úÖ"
      }
      tempArray.push(Markup.button.callback(`${chosenBtn}${aspect_ratio}`, `set_ar_${aspect_ratio}_${unic_id}`));
    }

    // Push temporary array to main buttons array
    buttons.push(tempArray);
  }

  // Add Save button at the end
  buttons.push([Markup.button.callback("C–æ—Ö—Ä–∞–Ω–∏—Ç—å", `back_${unic_id}`)]);

  ctx.editMessageText(baseDesk,{
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
    parse_mode: "MarkdownV2"
  });

}

export async function createNegativeMenu(ctx,unic_id){
  const baseMessage = `
üôÖ‚Äç‚ôÇÔ∏è *–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥* –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ, —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\\.
–ú—ã —É–∂–µ –ø–æ–∑–∞–±–æ—Ç–∏–ª–∏—Å—å –æ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ, –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å, –Ω–æ –º—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ–≥–æ –∑–∞–º–µ–Ω—ã –¥–ª—è –∏—Å–∫–∞—Ç–µ–ª–µ–π –Ω–æ–≤—ã—Ö –æ—â—É—â–µ–Ω–∏–π –∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è\\.`

  const optionsMessage = `
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:*
‚Äì ‚ú® –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π
 –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ–π –≤–≤–æ–¥ –∫ –Ω–∞—à–µ–º—É\\. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ\\-—Ç–æ —Å–ª–æ–º–∞—Ç—å –≥–æ—Ä–∞–∑–¥–æ –Ω–∏–∂–µ, –Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç –±–æ–ª–µ–µ —Å–ª–∞–±—ã–π\\.
‚Äì –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π
 –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑—è—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –≤–≤–æ–¥–æ–º, –Ω–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ—Ä—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –Ω–µ—É–º–µ–ª—ã—Ö —Ä—É–∫–∞—Ö\\.
`

  const finalMessage = `${baseMessage}$\n${optionsMessage}`

  const menuData = await handleInstanceRequest(unic_id,ctx)
  if(menuData == null) return

  const hasNegative = menuData.negative_prompt ? true : false;
  
  const buttons = Markup.inlineKeyboard([
    hasNegative ? [Markup.button.callback("‚ùå –í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",`reset_negative_${unic_id}`)] : [],
    [Markup.button.callback("–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",`set_negative_expert_${unic_id}`),Markup.button.callback("‚ú® –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π",`set_negative_simple_${unic_id}`)],
    [Markup.button.callback("<< –ù–∞–∑–∞–¥",`back_${unic_id}`)]
  ])

  const messageClear = await ctx.editMessageText(finalMessage,{
    reply_markup: buttons.reply_markup,
    parse_mode: "MarkdownV2"
  })

  await updateInstance(unic_id, "negative_mode","simple")

  ctx.session.currectAction = "editNegativeSimple"
  ctx.session.menuId = unic_id
  ctx.session.messageToClear = messageClear.message_id
}

export async function createMagickMenu(ctx, unic_id){
  const baseMessage = `‚ö°Ô∏è *–ú–∞–≥–∏—è* –¥–∞—ë—Ç –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π\\. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ _–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ_ –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\\!

*–§–∏–≥—É—Ä–∞* \‚Äì –Ω–∞—Ä–∏—Å—É–π —Å–∫—Ä—ã—Ç—ã–π —É–∑–æ—Ä –∏–ª–∏ —Ç–µ–∫—Å—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —É—á–∞—Å—Ç–∫–µ –∞—Ä—Ç–∞\\.
  
*–†–µ—Ñ–µ—Ä–µ–Ω—Å* \‚Äì –ø–µ—Ä–µ–Ω–µ—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —Å–≤–æ–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\\.
  
*–ü–æ–∑–∞* \‚Äì —Å –ª—ë–≥–∫–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–π –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –∞—Ä—Ç–µ\\.`

  const menuData = await handleInstanceRequest(unic_id,ctx)
  if(menuData == null) return

  const hasMagick = (menuData.magick_ref || menuData.magick_shape || menuData.magick_pose) ? true : false
  const cancelButton = hasMagick ? [Markup.button.callback("‚ùå –£–±—Ä–∞—Ç—å –º–∞–≥–∏—é", `remove_all_magick_${unic_id}`)] : []

  const buttons = Markup.inlineKeyboard([
    cancelButton,
    [Markup.button.callback("–§–∏–≥—É—Ä–∞", `set_magick_shape_${unic_id}`),Markup.button.callback("–ü–æ–∑–∞", `set_magick_pose_${unic_id}`)],
    [Markup.button.callback("–†–µ—Ñ–µ—Ä–µ–Ω—Å", `set_magick_ref_${unic_id}`)],
    [Markup.button.callback("<< –ù–∞–∑–∞–¥", `back_${unic_id}`)]
  ])

  await ctx.editMessageText(baseMessage,{
    reply_markup: buttons.reply_markup,
    parse_mode: "MarkdownV2"
  })

  ctx.session.currectAction = null
  ctx.session.menuId = null
  ctx.session.messageToClear = null
}

export async function createModelMenu(ctx,unic_id){
    const menuData = await handleInstanceRequest(unic_id,ctx)
    if(menuData == null) return

    const models = await getAllModels()

    const currentModel = await getModelByName(menuData.model_name)
    let model_page = menuData.model_page
    const maxPages = Math.ceil(models.length/modelsPerPage)

    if(model_page >= maxPages){
      await updateInstance(unic_id, "model_page", 0)
      model_page = 0;
    }

    if(model_page < 0){
      await updateInstance(unic_id, "model_page", maxPages-1)
      model_page = maxPages-1;
    }

    // console.log(model_page)
    let modelsPull = []

    // Calculate start index and end index for slice
    let startIndex =model_page*modelsPerPage;
    let endIndex=(model_page+1)*modelsPerPage;
    // endIndex--

    // Get page of currect mode
    const currentModelData = models.filter(model=>model.model_name == currentModel.model_name)
    const currentmodel_page = Math.floor(models.indexOf(currentModelData[0]) / modelsPerPage)

    models.length>=endIndex ? modelsPull=models.slice(startIndex,endIndex) : modelsPull=models.slice(startIndex,models.length);
    const extraModelSymbol = currentModel.has_alter_mode ? menuData.enable_alter_model ? currentModel.alter_model_confirm_cymbol : currentModel.confirm_cymbol : ""
    let modelMessage =`*${currentModel.model_name}* ${extraModelSymbol} [¬†](${currentModel.img_link})\n${escapeMarkdown(currentModel.description)}`

    modelMessage+=`\n\n_–í [–Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ](https://t.me/StableWaifu) –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫—É—á—É –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\\!_`

    // Check presets
    const has_preset = currentModel.has_preset ? true : false
    const preset_name = menuData.preset_name ? menuData.preset_name : has_preset ? await getDefaultPresetBymodel_name(currentModel.model_name).preset_name : ""
    const presetButton = has_preset ? [Markup.button.callback(`‚ú® –ü—Ä–µ—Å–µ—Ç ${currentModel.model_name}: ${preset_name}`, `model_select_presets_${unic_id}`),] : []

    // Create Navigate check mark
    // If the current page is the first page and the selected model is on the last page:
    let navigateToModelPrev = model_page === 0 && currentmodel_page === maxPages - 1 ? "‚úì" : "";

    // If the current page is the last page and the selected model is on the first page:
    let navigateToModelNext = model_page === maxPages - 1 && currentmodel_page === 0 ? "‚úì" : "";

    // For all other cases:
    !navigateToModelPrev ?  navigateToModelPrev = model_page - 1 === currentmodel_page ? "‚úì" : "" : ""
    !navigateToModelNext ?  navigateToModelNext = model_page + 1 === currentmodel_page ? "‚úì" : "" : ""


    const buttons = await sortButtonsInRow(modelsPull,currentModel.model_name,unic_id, 3)
    buttons.push([
      Markup.button.callback(`<< ${navigateToModelPrev}`, `model_prev_page_${unic_id}`),
      Markup.button.callback(`${model_page+1} / ${maxPages}`, `model_current_page`),
      Markup.button.callback(`${navigateToModelNext} >>`, `model_next_page_${unic_id}`)
    ])
    has_preset ? buttons.push(presetButton) : [],
    buttons.push([Markup.button.callback("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", `back_${unic_id}`)])

    ctx.editMessageText(modelMessage,{
      reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
      parse_mode: "MarkdownV2"
    })
}

export async function createPresetSelectMenu(ctx,unic_id){
  const menuId = await handleInstanceRequest(unic_id,ctx)
  if(menuId == null) return

  const presets = await getAllModelsPreset(menuId.model_name)

  const currentPreset = presets.find(preset => preset.preset_name === menuId.preset_name)
  let sufix = ``
  if(currentPreset.is_default){
    sufix = `*\\(_–ø–æ\\-—É–º–æ–ª—á–∞–Ω–∏—é_\\)*`
  }

  let baseMessage = `‚ú® *${currentPreset.preset_name}* ${sufix} [¬†](${currentPreset.img_link})
${escapeMarkdown(currentPreset.description)}`
  baseMessage+=`\n\n_\\*–ü—Ä–µ—Å–µ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å\\._`

  const buttons = await sortPresetButtonsInRow(presets, currentPreset.preset_name, unic_id,2)
  buttons.push([Markup.button.callback("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", `go_model_menu_${unic_id}`)])

  ctx.editMessageText(baseMessage,{
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
    parse_mode: "MarkdownV2"
  })
}

export async function createSmartRecycleMenu(ctx, unic_id) {
  let baseMessage = `‚ôªÔ∏è SmartRecycle –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª—å –Ω–∞—à–∏—Ö –º–æ–¥–µ–ª–µ–π –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏\\!`;

  baseMessage += `\n\n__–í —á–µ–º –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ–±—ã—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏?__
\‚Äì *SmartRecycle* –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–∏–∫, –∞ —Å–æ–∑–¥–∞—ë—Ç –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç, –∫–∞–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\\.`;

  baseMessage += `\n\n‚ùóÔ∏è –¶–≤–µ—Ç–∞, –≤–Ω–µ—à–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å—Ç–∏–ª—å —Ü–µ–ª–∏–∫–æ–º –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ *–≤–≤–æ–¥–∞*\\!`;

  baseMessage += `[¬†](https://telegra.ph/file/f962c6dbf4ef1d60c65d7.png)`;

  const buttons = Markup.inlineKeyboard([
    [Markup.button.callback("‚ôªÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å (+5—Ç)", `switch_recycle_${unic_id}`)],
    [Markup.button.callback("<< –ù–∞–∑–∞–¥", `back_${unic_id}`)],
  ]);

  await ctx.editMessageText(baseMessage, {
    reply_markup: buttons.reply_markup,
    parse_mode: "MarkdownV2",
  });
}

export async function createStrengthMenu(ctx, unic_id) {
  const menuData = await handleInstanceRequest(unic_id,ctx)
  if(menuData == null) return

  const currentStrength = await getStrenghtByName(menuData.img_2_img_strength);
  const allStrenghtSettings = await getAllStrenghtSettings();

  // console.log(currentStrength,"Sfsfsfsf")

  let baseMessage = `üí™ –°–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ\\!`;

  baseMessage += `\n*\\> ${currentStrength.name}* ${escapeMarkdown(currentStrength.description)}`;
  baseMessage += `[¬†](${currentStrength.img_link})`;

  let buttons = [];

  // Create Buttons as 2,1,2
  for (let i = 0; i < allStrenghtSettings.length - 1; i += 3) {
    if (allStrenghtSettings[i + 1]) {
        let selectedButton1 = allStrenghtSettings[i].name == menuData.img_2_img_strength ? '‚úÖ ' : '';
        let selectedButton2 = allStrenghtSettings[i + 1].name == menuData.img_2_img_strength ? '‚úÖ ' : '';

        let buttonRow = [
            Markup.button.callback(selectedButton1 + allStrenghtSettings[i].name,`change_strenght_${allStrenghtSettings[i].id}_${unic_id}`),
            Markup.button.callback(selectedButton2 + allStrenghtSettings[i + 1].name,`change_strenght_${allStrenghtSettings[i + 1].id}_${unic_id}`)
        ];
        buttons.push(buttonRow);
    }

    if (allStrenghtSettings[i + 2]) { // Ensure that this element exists before accessing it
        let selectedButton3 = allStrenghtSettings[i+2].name == menuData.img_2_img_strength ? '‚úÖ ': '';

        let singleButtonRow = [Markup.button.callback(selectedButton3+allStrenghtSettings[i+2].name, `change_strenght_${allStrenghtSettings[i+2].id}_${unic_id}`)];

        buttons.push(singleButtonRow);
    }
  }


  buttons.push([Markup.button.callback("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", `back_${unic_id}`)]);

  ctx.editMessageText(baseMessage, {
     reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
     parse_mode: "MarkdownV2",
  });
}


export async function replyGreatingMessage(ctx) {
  const gretingMessage = `  
üëãüèª –ü—Ä–∏–≤–µ—Ç\\! –¢—É—Ç –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ –∞–Ω–∏–º–µ –∞—Ä—Ç—ã *–ø–æ—Ç—Ä—è—Å–∞—é—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞* –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∞–º–æ–≥–æ –ø–µ—Ä–µ–¥–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ò–ò\\.
    
*–•–æ—á–µ—à—å —Å—Ä–∞–∑—É –∫ –¥–µ–ª—É?*
*\\>* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∂–µ–ª–∞–µ—à—å —É–≤–∏–¥–µ—Ç—å\\. –ú—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—Å–µ —è–∑—ã–∫–∏ :\\)
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç, –Ω–∞—á–Ω–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è –≤–Ω–µ—à–Ω–æ—Å—Ç–∏\\. –ê –µ—â—ë —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—é–¥–∞ —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ—ë –≤ –Ω–∞—à–µ–º —Å—Ç–∏–ª–µ\\!
    
–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞—Ä—Ç–æ–≤ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ *[–Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ](https://t.me/stable_anime_blog)*\\.
_\\*–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–∏–º –ø–æ—à–∞–≥–æ–≤—ã–º –æ–±—É—á–µ–Ω–∏–µ–º\\!_ üëáüèª`;
  const buttons = Markup.inlineKeyboard([[Markup.button.url("–û–±—É—á–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏", "https://telegra.ph/Obuchenie-Stable-Anime-02-24")]]);

  await ctx.replyWithPhoto("https://telegra.ph/file/ce3bd783f6a4ac83489c3.png",{
    caption : gretingMessage,
    reply_markup : buttons.reply_markup,
    parse_mode : "MarkdownV2"
  })
}

export async function createTokensMenu(ctx){

  const TOKENS = 120
  const FREE_BONUS = 4

  let baseMessage = `üíµ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: *${TOKENS}*\n`
        baseMessage += `_1 –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è \\~ 10 —Ç–æ–∫–µ–Ω–æ–≤_`

        baseMessage+=`\n\n*–¢–æ–∫–µ–Ω—ã* ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–æ–≤\\. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å, –≤ 02:00 \\(–ú–°–ö\\), –≤–∞–º –≤—ã–¥–∞—ë—Ç—Å—è \\+20 —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –∏—Ö –º–µ–Ω—å—à–µ 20\\.`
    
        baseMessage+=`\n\nüîÅ –ë–æ–Ω—É—Å–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã: *${FREE_BONUS}*`
        baseMessage+=`\n_—Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –≤ 02:00 \\(–ú–°–ö\\), –¥–µ–π—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º_`

        const buttons = [
            [Markup.button.callback("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å","tokens_buy")],
            [Markup.button.callback("üë§ –ü—Ä–∏–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∞","referal")],
            [Markup.button.callback("üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã","bonus_tokens")],
        ]

        return [baseMessage,buttons]
}

export async function createTokensMenuAndReply(ctx){
  const [baseMessage,buttons] = await createTokensMenu(ctx)

  await ctx.replyWithMarkdownV2(baseMessage, {
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
  });
}

export async function createTokensMenuAndEdit(ctx){
  const [baseMessage,buttons] = createTokensMenu(ctx)

  await ctx.editMessageText(baseMessage, {
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
    parse_mode: "MarkdownV2",
  });
}

export async function createGiftTokenMenu(ctx){
  let baseMessage = `–î–∞—Ä–∏–º —Ç–æ–∫–µ–Ω—ã *${ctx.session.userNameSendGift}*\\.`
    baseMessage+=`\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É\\. –û–Ω–∏ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\\!`
    baseMessage+=`\n_\\*–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ \\- 10 —Ç–æ–∫–µ–Ω–æ–≤_`

    const buttons = [
      [Markup.button.callback(`üëª –ê–Ω–æ–Ω–∏–º–Ω–æ: ${ctx.session.isAnonim ? "–î–∞" : "–ù–µ—Ç"}`, 'change_anonim_gift_token')],
      ctx.session.userNoteSendGift ? [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å', 'change_notes_gift_token')] : [Markup.button.callback('üìù –ü–æ–¥–ø–∏—Å—å –∫ –ø–æ–¥–∞—Ä–∫—É', 'change_notes_gift_token')]
   ]

   ctx.session.currectAction = ""

    return [baseMessage, buttons]
}

export async function createGiftTokenMenuAndReply(ctx){
  const [baseMessage, buttons] = await createGiftTokenMenu(ctx)

  await ctx.replyWithMarkdownV2(baseMessage, {
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
  });
}

export async function createGiftTokenMenuAndEdit(ctx){
  const [baseMessage, buttons] = await createGiftTokenMenu(ctx)

  await ctx.editMessageText(baseMessage, {
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
    parse_mode: "MarkdownV2",
  });
}

// export async function createTokenBuyMenu(ctx){

//   let baseMessage = `*–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤\\.*`
//   baseMessage+=`–ë–æ–ª—å—à–µ - –≤—ã–≥–æ–¥–Ω–µ–µ, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–ª–∞—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å\\!`
//   baseMessage+=`_–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ üíé *Waifu\\+* –∏–º–µ—é—Ç —Å–∫–∏–¥–∫—É –≤ 10% –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–æ–≤\\!_`

// }
import fs from "fs/promises";
import path from "path";

export async function createCompleteMenu(statusData,ctx,isFirst = true,message_id = null,extraTag = ``,extraFolder = 'txt2img'){
  console.log('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', statusData.result,statusData);

  const imageBuffer = Buffer.from(statusData.result.img, "base64");
  const unic_id = statusData.result.unic_id;
  const menuId = await getInstanceById(unic_id)

  const saveFoler = `data/ready/${extraFolder}`
  // Check folder for exists
  await fs.mkdir(saveFoler, { recursive: true })

  const saveFilename =  path.join(saveFoler,`${menuId.model_name}_${unic_id}${extraTag}.png`)
  await fs.writeFile(saveFilename, imageBuffer);

  let message = message_id;
  if(isFirst){
    message = await ctx.editMessageText(`üèÅ *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!*\n–ù–∏–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞`,{
      // clear markup
      reply_markup: {},
      parse_mode: "MarkdownV2"
  })
  }
  

  return [message,saveFilename]
}

export async function createCreateMessageMarkup(unic_id,menuData = null,whichButtonBlock = null,job_id = null){
  let menuId;

  if(menuData){
    menuId = menuData;
  } else{
    menuId = await getInstanceById(unic_id)
  }

  let finaleMessage = `\\#${menuId.model_name.replace(" ","\\_")} \\#${menuId.generation_type}`

  finaleMessage+=`\nüå± –°–∏–¥: [${menuId.sid}](https://t.me/SD_Daswer_bot?start=${menuId.unic_id})`
  finaleMessage+=`\n üé® –í–≤–æ–¥: \`${menuId.prompt}\``

  finaleMessage+=`\n\n_\\*–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –µ—Å—Ç—å –µ—â—ë 3 –±–æ–Ω—É—Å–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–æ–≤—Ç–æ—Ä, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã_`

  let againBtn = whichButtonBlock == "again" ? Markup.button.callback(`‚è≥ –û—Ç–º–µ–Ω–∏—Ç—å`,`cancel_again_gen_${job_id}`) : whichButtonBlock ? Markup.button.callback(`üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å`,`wait_message_gen`) : Markup.button.callback(`üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å`,`gen_again_${menuId.unic_id}`) 
  let variationBtn = whichButtonBlock == "var" ? Markup.button.callback(`‚è≥ –û—Ç–º–µ–Ω–∏—Ç—å`,`cancel_var_${job_id}_main`) : whichButtonBlock ? Markup.button.callback(`üîÄ –í–∞—Ä–∏–∞—Ü–∏–∏`,`wait_message_gen`) : Markup.button.callback(`üîÄ –í–∞—Ä–∏–∞—Ü–∏–∏`,`variations_gen_menu_${menuId.unic_id}`)
  let scaleBtn = whichButtonBlock == "scale" || whichButtonBlock == "hyperscale" ? Markup.button.callback(`‚è≥ –û—Ç–º–µ–Ω–∏—Ç—å`, `cancel_upscale_${job_id}_gen`) : whichButtonBlock ? Markup.button.callback(`üî• HyperScale`,`wait_message_gen`) : Markup.button.callback(`üî• HyperScale`,`upscale_gen_menu_${menuId.unic_id}_gen`)


  const buttons = [
      [Markup.button.callback("‚öô –ò–∑–º–µ–Ω–∏—Ç—å",`change_gen_${menuId.unic_id}`),againBtn],
      [variationBtn,scaleBtn]
  ]

  return [finaleMessage, buttons]
}

export async function createCreateMessageMarkupVar(unic_id,menuData = null,whichButtonBlock=null,jobId = null){
  let menuId;

  if(menuData){
    menuId = menuData;
  } else{
    menuId = await getInstanceById(unic_id)
  }

  let finaleMessage = `\\#${menuId.model_name} ${menuId.preset_name ? `\\#${menuId.preset_name} ` : ``}\\#variant`


  finaleMessage+=`\n üîÄ –í–∞—Ä–∏–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ [\\#${menuId.sid}](https://t.me/SD_Daswer_bot?start=${menuId.subsid_id})`
  finaleMessage+=`\nüå± –°–∏–¥: [${menuId.variation_sid}](https://t.me/SD_Daswer_bot?start=${menuId.unic_id})`

  const againBtn = whichButtonBlock == "again" ? Markup.button.callback(`‚è≥ –û—Ç–º–µ–Ω–∏—Ç—å`, `cancel_var_${jobId}_var`) : whichButtonBlock ? Markup.button.callback(`üîÅ –ï—â—ë —Ä–∞–∑`,`wait_message_gen`) : Markup.button.callback(`üîÅ –ï—â—ë —Ä–∞–∑`,`variations_gen_start_${menuId.subsid_iad}_varmenu`)
  const scaleBtn = whichButtonBlock == "scale" ? Markup.button.callback(`‚è≥ –û—Ç–º–µ–Ω–∏—Ç—å`, `cancel_upscale_${jobId}_var`) : whichButtonBlock ? Markup.button.callback(`üî• HyperScale`,`wait_message_gen`) : Markup.button.callback("üî• HyperScle",`upscale_gen_menu_${menuId.unic_id}_var`)

  const buttons = [
    scaleBtn,againBtn,
  ]

  return [finaleMessage, buttons]
}

export function deleteMessageMarkup(ctx, messageId) {
  try{
  bot.telegram.editMessageReplyMarkup(ctx.from.id, messageId, null, {});
  } catch(e){
    console.log(e)
  }
}

export async function restrictEditMessage(ctx,unic_id){
  const createdTime = await getInstanceCreatedTimeById(unic_id)
}


